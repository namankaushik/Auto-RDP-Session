name: Auto RDP Session

on:
  schedule:
    # Run every 8 hours
    - cron: '0 */8 * * *'
  workflow_dispatch: # Allow manual trigger

env:
  NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

jobs:
  auto-rdp:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hours max runtime
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Check for ngrok auth token
        shell: powershell
        run: |
          if ([string]::IsNullOrEmpty($env:NGROK_AUTH_TOKEN)) {
            Write-Host "⚠️  WARNING: NGROK_AUTH_TOKEN secret is not set!"
            Write-Host "To enable automatic ngrok tunnel setup, please:"
            Write-Host "1. Go to https://ngrok.com and sign up for a free account"
            Write-Host "2. Get your auth token from https://dashboard.ngrok.com/get-started/your-authtoken"
            Write-Host "3. Add it as a repository secret named 'NGROK_AUTH_TOKEN'"
            Write-Host "4. Go to: Settings -> Secrets and variables -> Actions -> New repository secret"
            Write-Host "Without this token, you'll need to manually set up tunneling."
            Write-Host ""
          } else {
            Write-Host "✓ ngrok auth token is configured"
          }
        
      - name: Install and configure ngrok
        shell: powershell
        run: |
          # Download and install ngrok
          Write-Host "Downloading ngrok..."
          Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "ngrok.zip"
          Expand-Archive -Path "ngrok.zip" -DestinationPath "."
          
          # Configure ngrok if auth token is available
          if (![string]::IsNullOrEmpty($env:NGROK_AUTH_TOKEN)) {
            Write-Host "Configuring ngrok with auth token..."
            .\ngrok.exe config add-authtoken $env:NGROK_AUTH_TOKEN
          } else {
            Write-Host "Skipping ngrok configuration (no auth token)"
          }
          
      - name: Enable RDP and configure user
        shell: powershell
        run: |
          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          
          # Set up user account
          $Password = ConvertTo-SecureString "RDP123!@#" -AsPlainText -Force
          $Username = "rdpuser"
          
          # Create user if doesn't exist
          try {
            Get-LocalUser -Name $Username -ErrorAction Stop
            Write-Host "User $Username already exists"
          } catch {
            New-LocalUser -Name $Username -Password $Password -PasswordNeverExpires -AccountNeverExpires
            Write-Host "Created user $Username"
          }
          
          # Add to Remote Desktop Users group
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $Username -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Administrators" -Member $Username -ErrorAction SilentlyContinue
          
          Write-Host "RDP enabled for user: $Username"
          Write-Host "Password: RDP123!@#"
          
      - name: Start ngrok TCP tunnel
        shell: powershell
        run: |
          if (![string]::IsNullOrEmpty($env:NGROK_AUTH_TOKEN)) {
            Write-Host "Starting ngrok TCP tunnel on port 3389..."
            
            # Start ngrok in background and capture output
            Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp", "3389", "--log=stdout" -RedirectStandardOutput "ngrok-output.txt" -NoNewWindow
            
            # Wait for ngrok to start
            Start-Sleep -Seconds 10
            
            # Get tunnel information from ngrok API
            $maxAttempts = 30
            $attempt = 0
            $tunnelInfo = $null
            
            do {
              $attempt++
              Write-Host "Attempt $attempt to get tunnel info..."
              
              try {
                $response = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -Method Get
                if ($response.tunnels -and $response.tunnels.Count -gt 0) {
                  $tunnelInfo = $response.tunnels[0]
                  break
                }
              } catch {
                Write-Host "Waiting for ngrok to start..."
              }
              
              Start-Sleep -Seconds 2
            } while ($attempt -lt $maxAttempts)
            
            if ($tunnelInfo) {
              $publicUrl = $tunnelInfo.public_url
              Write-Host "🚀 === NGROK TUNNEL ACTIVE ==="
              Write-Host "Public URL: $publicUrl"
              
              # Extract host and port from URL
              if ($publicUrl -match "tcp://([^:]+):(\d+)") {
                $host = $matches[1]
                $port = $matches[2]
                
                Write-Host "RDP Connection Details:"
                Write-Host "Host: $host"
                Write-Host "Port: $port"
                Write-Host "Username: rdpuser"
                Write-Host "Password: RDP123!@#"
                Write-Host "=============================="
                
                # Save connection details to file
                @"
NGROK RDP CONNECTION DETAILS
============================
Host: $host
Port: $port
Username: rdpuser
Password: RDP123!@#
Full URL: $publicUrl

To connect:
1. Open Remote Desktop Connection
2. Computer: $host`:$port
3. Username: rdpuser
4. Password: RDP123!@#
"@ | Out-File -FilePath "rdp-connection-info.txt" -Encoding UTF8
                
                # Create RDP file with ngrok details
                @"
full address:s:$host`:$port
username:s:rdpuser
prompt for credentials:i:0
administrative session:i:1
"@ | Out-File -FilePath "connection-ngrok.rdp" -Encoding UTF8
                
              }
            } else {
              Write-Host "❌ Failed to get ngrok tunnel information"
              Write-Host "Checking ngrok output..."
              if (Test-Path "ngrok-output.txt") {
                Get-Content "ngrok-output.txt" | Write-Host
              }
            }
          } else {
            Write-Host "⚠️  Skipping ngrok tunnel (no auth token configured)"
          }
          
      - name: Create standard RDP connection file
        shell: powershell
        run: |
          # Create standard RDP file for GitHub Actions runner
          $runnerIP = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.IPAddress -notlike "127.*" -and $_.IPAddress -notlike "169.254.*"} | Select-Object -First 1).IPAddress
          
          @"
full address:s:$runnerIP
username:s:rdpuser
prompt for credentials:i:0
administrative session:i:1
"@ | Out-File -FilePath "connection.rdp" -Encoding UTF8
          
          # Create status file
          @"
RDP Session Status
==================
Runner IP: $runnerIP
Username: rdpuser
Password: RDP123!@#
Timestamp: $(Get-Date)

Note: Use connection-ngrok.rdp if ngrok tunnel is available
"@ | Out-File -FilePath "rdp-status.txt" -Encoding UTF8
          
          Write-Host "Standard RDP connection file created"
          Write-Host "Runner IP: $runnerIP"
          
      - name: Keep session alive and monitor
        shell: powershell
        run: |
          Write-Host "🔄 Keeping RDP session alive..."
          Write-Host "Session will run for up to 6 hours or until manually stopped"
          Write-Host "Check the Actions tab for real-time logs"
          
          $startTime = Get-Date
          $maxDuration = New-TimeSpan -Hours 6
          
          # Create monitoring loop
          while ((Get-Date) - $startTime -lt $maxDuration) {
            $currentTime = Get-Date
            $elapsed = $currentTime - $startTime
            
            Write-Host "⏰ Session active for: $($elapsed.ToString('hh\:mm\:ss'))"
            
            # Check if ngrok is still running
            if (![string]::IsNullOrEmpty($env:NGROK_AUTH_TOKEN)) {
              try {
                $response = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -Method Get -ErrorAction SilentlyContinue
                if ($response.tunnels -and $response.tunnels.Count -gt 0) {
                  $publicUrl = $response.tunnels[0].public_url
                  Write-Host "✅ Ngrok tunnel active: $publicUrl"
                } else {
                  Write-Host "⚠️  Ngrok tunnel not found"
                }
              } catch {
                Write-Host "⚠️  Cannot reach ngrok API"
              }
            }
            
            # Show active RDP sessions
            $rdpSessions = quser 2>$null
            if ($rdpSessions) {
              Write-Host "👥 Active RDP sessions:"
              $rdpSessions | ForEach-Object { Write-Host "   $_" }
            } else {
              Write-Host "📭 No active RDP sessions"
            }
            
            Start-Sleep -Seconds 300  # Check every 5 minutes
          }
          
          Write-Host "⏹️  Session timeout reached (6 hours)"
          
      - name: Upload connection files
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rdp-connection-files-${{ github.run_number }}
          path: |
            connection.rdp
            connection-ngrok.rdp
            rdp-connection-info.txt
            rdp-status.txt
            ngrok-output.txt
          retention-days: 7
          
      - name: Display final connection summary
        if: always()
        shell: powershell
        run: |
          Write-Host "📋 === SESSION SUMMARY ==="
          Write-Host "✅ RDP session completed"
          Write-Host ""
          Write-Host "📁 Available artifacts:"
          
          if (Test-Path "connection-ngrok.rdp") {
            Write-Host "   🚀 connection-ngrok.rdp - Direct access via ngrok tunnel"
            if (Test-Path "rdp-connection-info.txt") {
              Write-Host "   📄 rdp-connection-info.txt - Connection details"
              Write-Host ""
              Write-Host "📋 Final Connection Info:"
              Get-Content "rdp-connection-info.txt" | Write-Host
            }
          } else {
            Write-Host "   ⚠️  ngrok tunnel was not available"
          }
          
          Write-Host "   🖥️  connection.rdp - Standard RDP file"
          Write-Host "   📊 rdp-status.txt - Session status"
          Write-Host ""
          Write-Host "💡 To use: Download the RDP file from artifacts and double-click to connect"
          Write-Host "========================"
