name: Auto RDP Session
on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'  # Run every 5 minutes for testing
jobs:
  setup-rdp:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hours timeout
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Enable RDP access
        shell: powershell
        run: |
          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          
          # Set user credentials
          $username = "Administrator"
          $password = "RDPPass2024!"
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          
          # Create/modify user if needed
          try {
            Get-LocalUser -Name $username -ErrorAction Stop
            Set-LocalUser -Name $username -Password $securePassword
          } catch {
            New-LocalUser -Name $username -Password $securePassword -Description "RDP User" -UserMayNotChangePassword
          }
          
          # Add to Administrators group
          Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue
          
          Write-Host "RDP enabled successfully"
      - name: Install ngrok
        shell: powershell
        run: |
          try {
            # Download ngrok
            Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "ngrok.zip"
            Expand-Archive -Path "ngrok.zip" -DestinationPath "."
            
            Write-Host "ngrok downloaded and extracted"
            
            # Test ngrok
            ./ngrok --help | Select-Object -First 3
            
          } catch {
            Write-Host "Error installing ngrok: $($_.Exception.Message)"
            exit 1
          }
      - name: Setup ngrok auth token
        shell: powershell
        run: |
          # Use a dummy token for demo - replace with real token from secrets
          $authToken = "${{ secrets.NGROK_TOKEN }}"
          if ([string]::IsNullOrWhiteSpace($authToken)) {
            Write-Host "‚ö†Ô∏è  No NGROK_TOKEN secret found. Using demo mode."
            # For demo purposes only - this won't work without a real token
            $authToken = "demo_token_replace_with_real"
          }
          
          ./ngrok config add-authtoken $authToken
          Write-Host "ngrok auth token configured"
      - name: Start ngrok tunnel
        shell: powershell
        run: |
          try {
            # Start ngrok in background
            Start-Process -FilePath "./ngrok" -ArgumentList "tcp", "3389" -WindowStyle Hidden
            Start-Sleep -Seconds 10
            
            # Try to get tunnel info
            try {
              $response = Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels" -Method Get -TimeoutSec 10
              if ($response.tunnels -and $response.tunnels.Count -gt 0) {
                $publicUrl = $response.tunnels[0].public_url
                Write-Host "‚úÖ ngrok tunnel active: $publicUrl"
                
                # Extract host and port
                $uri = [System.Uri]$publicUrl
                $ngrokHost = $uri.Host
                $ngrokPort = $uri.Port
                
                Write-Host "Host: $ngrokHost"
                Write-Host "Port: $ngrokPort"
                
                # Save connection info
                @"
    ngrok Tunnel Details:
    Public URL: $publicUrl
    Host: $ngrokHost
    Port: $ngrokPort
    Username: Administrator
    Password: RDPPass2024!
    "@ | Out-File -FilePath "rdp-connection-info.txt" -Encoding UTF8
                
                # Create ngrok RDP file
                @"
    screen mode id:i:2
    use multimon:i:0
    desktopwidth:i:1024
    desktopheight:i:768
    session bpp:i:32
    winposstr:s:0,3,0,0,800,600
    compression:i:1
    keyboardhook:i:2
    audiocapturemode:i:0
    videoplaybackmode:i:1
    connection type:i:7
    networkautodetect:i:1
    bandwidthautodetect:i:1
    displayfontsmoothing:i:0
    allow desktop composition:i:0
    allow font smoothing:i:0
    disable wallpaper:i:0
    disable full window drag:i:1
    disable menu anims:i:1
    disable themes:i:0
    disable cursor setting:i:0
    bitmapcachepersistenable:i:1
    full address:s:$ngrokHost:$ngrokPort
    audiomode:i:0
    redirectprinters:i:1
    redirectcomports:i:0
    redirectsmartcards:i:1
    redirectclipboard:i:1
    redirectposdevices:i:0
    autoreconnection enabled:i:1
    authentication level:i:2
    prompt for credentials:i:0
    negotiate security layer:i:1
    remoteapplicationmode:i:0
    gate way hostname:s:
    gateway usage method:i:4
    gatewaycredentialssource:i:4
    gatewayprofileusagemethod:i:0
    promptcredentialonce:i:0
    gatewaybrokeringtype:i:0
    use redirection server name:i:0
    rdgiskdcproxy:i:0
    kdcproxyname:s:
    username:s:Administrator
    "@ | Out-File -FilePath "connection-ngrok.rdp" -Encoding UTF8
                
              } else {
                Write-Host "‚ö†Ô∏è  No active tunnels found"
              }
            } catch {
              Write-Host "‚ö†Ô∏è  Cannot reach ngrok API: $($_.Exception.Message)"
            }
            
          } catch {
            Write-Host "Error starting ngrok: $($_.Exception.Message)"
          }
      - name: Create standard RDP file
        shell: powershell
        run: |
          # Create standard RDP connection file
          @"
    screen mode id:i:2
    use multimon:i:0
    desktopwidth:i:1024
    desktopheight:i:768
    session bpp:i:32
    winposstr:s:0,3,0,0,800,600
    compression:i:1
    keyboardhook:i:2
    audiocapturemode:i:0
    videoplaybackmode:i:1
    connection type:i:7
    networkautodetect:i:1
    bandwidthautodetect:i:1
    displayfontsmoothing:i:0
    allow desktop composition:i:0
    allow font smoothing:i:0
    disable wallpaper:i:0
    disable full window drag:i:1
    disable menu anims:i:1
    disable themes:i:0
    disable cursor setting:i:0
    bitmapcachepersistenable:i:1
    full address:s:localhost:3389
    audiomode:i:0
    redirectprinters:i:1
    redirectcomports:i:0
    redirectsmartcards:i:1
    redirectclipboard:i:1
    redirectposdevices:i:0
    autoreconnection enabled:i:1
    authentication level:i:2
    prompt for credentials:i:0
    negotiate security layer:i:1
    remoteapplicationmode:i:0
    gate way hostname:s:
    gateway usage method:i:4
    gatewaycredentialssource:i:4
    gatewayprofileusagemethod:i:0
    promptcredentialonce:i:0
    gatewaybrokeringtype:i:0
    use redirection server name:i:0
    rdgiskdcproxy:i:0
    kdcproxyname:s:
    username:s:Administrator
    "@ | Out-File -FilePath "connection.rdp" -Encoding UTF8
          
          Write-Host "Standard RDP file created"
      - name: Keep session alive and monitor
        shell: powershell
        run: |
          $timeout = (Get-Date).AddHours(6)  # 6 hour timeout
          $checkInterval = 300  # 5 minutes
          
          Write-Host "üöÄ RDP session is now active!"
          Write-Host "‚è∞ Session will run for 6 hours or until manually stopped"
          Write-Host ""
          
          # Initial status
          "RDP Session Started: $(Get-Date)" | Out-File -FilePath "rdp-status.txt" -Encoding UTF8
          
          # Monitor loop
          while ((Get-Date) -lt $timeout) {
            $remainingMinutes = [math]::Round(($timeout - (Get-Date)).TotalMinutes)
            Write-Host "‚è≥ Session active - $remainingMinutes minutes remaining"
            
            # Update status file
            "Last Check: $(Get-Date) - $remainingMinutes minutes remaining" | Out-File -FilePath "rdp-status.txt" -Append -Encoding UTF8
            
            # Check ngrok status
            try {
              $response = Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels" -Method Get -TimeoutSec 5
              if ($response.tunnels -and $response.tunnels.Count -gt 0) {
                Write-Host "üåê ngrok tunnel active: $($response.tunnels[0].public_url)"
              } else {
                Write-Host "‚ö†Ô∏è  ngrok tunnel not active"
              }
            } catch {
              Write-Host "‚ö†Ô∏è  Cannot reach ngrok API"
            }
            
            # Show active RDP sessions
            $rdpSessions = quser 2>$null
            if ($rdpSessions) {
              Write-Host "üë• Active RDP sessions:"
              $rdpSessions | ForEach-Object { Write-Host "   $_" }
            } else {
              Write-Host "üì≠ No active RDP sessions"
            }
            
            Start-Sleep -Seconds $checkInterval
          }
          
          Write-Host "‚èπÔ∏è  Session timeout reached (6 hours)"
      - name: Upload connection files
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rdp-connection-files-${{ github.run_number }}
          path: |
            connection.rdp
            connection-ngrok.rdp
            rdp-connection-info.txt
            rdp-status.txt
          retention-days: 7
          
      - name: Display final connection summary
        if: always()
        shell: powershell
        run: |
          Write-Host "Session Summary"
          Write-Host "RDP session completed"
          
          if (Test-Path "connection-ngrok.rdp") {
            Write-Host "ngrok tunnel RDP file available"
          }
          
          if (Test-Path "connection.rdp") {
            Write-Host "Standard RDP file available"
          }
          
          Write-Host "Download RDP files from artifacts to connect"
